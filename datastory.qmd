---
title: "Data Story"
---

# Data Cleaning

I have cleaned the dataset by removing duplicate and NA values, as well as selecting only the relevant columns required for my data analysis.

You can view both original and cleaned datasets here:

```{=html}

<iframe height="400" width="100%" frameborder="no" src="https://edwxgo-yin0shuen-chin.shinyapps.io/App1/"> </iframe>
```

## Names and Meanings of Variables in Dataset

"artist" refers to the name of the Artist.

"song" refers to the name of the song track.

"explicit" refers to whether the lyrics or content of a song or a music video contain one or more of the criteria which could be considered offensive or unsuitable for children.

"year" refers to the release year of the track.

"popularity" refers to the popularity level of the track. The higher the value the more popular the song is.

"speechiness" refers to the presence of spoken words in a sound track. The greater the presence of speech-like qualities, the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are likely made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.

"tempo" refers to the overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.


# Data Visualisation

Below, I will be analysing various song properties and their relationships with song popularity.

The main question I wish to answer is **"What determines the extent of popularity of songs in Spotify?"**

------------------------------------------------------------------------

## [1.0 Songs Overall Statistics]{.underline}

## 1.1 Songs Per Year

The bar plot below consolidates the number of songs released for each year, between 1998 and 2020. Hover over each respective bar to see the individual values.

```{r, echo=FALSE, message = FALSE}
library(dplyr)
library(ggplot2)
library(gganimate)
library(plotly)
library(tidyverse)


df <- read_csv("df.csv")
songs_per_year <- df %>% count(year) %>% arrange(year)



hover_text <- data.frame(year = songs_per_year$year, n = songs_per_year$n)

p <- ggplotly(ggplot(songs_per_year, aes(x = year, y = n)) +
  geom_col(fill = 'mediumpurple') +
  labs(title = 'Number of songs per year',
       x = 'Year',
       y = 'Number of songs') +
  scale_x_continuous(breaks = songs_per_year$year) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)))

hover_text <- data.frame(year = songs_per_year$year,
                         n = songs_per_year$n,
                         label = paste(songs_per_year$year, ":", songs_per_year$n, sep = " "))


p
```

## 1.2 Songs Per Artist - Top 30 Artists

The interactive bar chart below consolidates data on the number of songs released by artists featured in the dataset of top Spotify tracks, arranged from artists with the highest number of songs featured to lowest.

Adjust the slider to select your preferred number of artists to show in the chart.

*The artist with the most number of featured songs is Rihanna, with 25 songs.*

```{=html}

<iframe height="400" width="100%" frameborder="no" src="https://edwxgo-yin0shuen-chin.shinyapps.io/App2/"> </iframe>
```
## 1.3 Top 25 Songs Based On Popularity

Line graph features the top 25 songs from the dataset, arranged in descending order based on popularity level.

Hover over each point to its individual popularity level out of 100.

*The most popular song is Sweater Weather, with a popularity rating of 89 out of 100.*

```{r, echo=FALSE, warning = FALSE}
library(ggplot2)
library(dplyr)
library(gganimate)
library(plotly)


# Arrange dataframe by 'popularity' in descending order and select top 25 rows
df_top <- df %>%
  arrange(desc(popularity)) %>%
  select(popularity, song) %>%
   head(25) 




# Create line plot
p <- ggplot(df_top, aes(x = reorder(song, -popularity), y = popularity, group = 1)) +
  geom_line(colour = "blue") +
  geom_point(colour = "blue") +
  labs(title = "Top 25 Spotify Songs in Track List", x = "Song", y = "Popularity") +
  scale_color_manual(values = "blue") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  guides(fill = FALSE)

p <- p + transition_states(states = song, transition_length = 2)

ggplotly(p, tooltip = c("song", "popularity")) %>%
  style(xaxis = list(title = "Song"),
        yaxis = list(title = "Popularity"),
        title = "Top 25 songs")


```

## [2.0 Explicit Songs Overview]{.underline}

## 2.1 Songs Containing Explicit Content

This simple pie chart below clearly illustrates the percentage of songs which contain explicit content.

*27.6% , or the minority of the songs in this dataset, are explicit.*

```{r, echo=FALSE}

# Group the data by 'explicit'
df_grouped <- df %>%
  group_by(explicit) %>%
  summarise(total_songs =n())



# Calculate the percentage of each variable
df_grouped <- df_grouped %>%
  mutate(percent = total_songs/sum(total_songs)*100)

# Sort the data by 'total_songs'
df_sorted <- df_grouped %>%
  arrange(desc(total_songs))



# Create a pie chart
pie_chart <- ggplot(df_sorted, aes(x = "", y = total_songs, fill = explicit)) +
  geom_bar(width = 1, stat = "identity") +
  coord_polar("y", start = 0) +
  scale_fill_manual(values = c("blue", "red")) +
  geom_text(aes(label = paste0(round(percent, 1), "%")),
            position = position_stack(vjust = 0.5)) +
  labs(title = "Songs containing explicit content",
       x = NULL,
       y = NULL,
       fill = NULL,
       color = NULL) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        axis.ticks = element_blank(),
        plot.title = element_text(hjust = 0.5))

# Display the plot
print(pie_chart)
```

## 2.2 Year versus Explicit Content

The area plot below illustrates the relationship between the year of song published and explicit songs.

Hover over each point to see its individual values.

```{r, echo = FALSE, message = FALSE}
library(ggplot2)
library(plotly)
library(gganimate)

df_explicit <- df %>%
  filter(explicit == TRUE) %>%
  count(year, sort = TRUE) %>%
  arrange (year)

plot <- ggplot(df_explicit, aes(x = year, y = n)) +
  geom_area(fill = "red", alpha = 0.5) +
  geom_point(colour = "red", size = 1) +
  labs(title = "Number of explicit songs by year",
       x = "Year",
       y = "Total songs") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1))

plot <- ggplotly(plot, tooltip = c("year", "n"))
plot$data[[1]]$text <- paste("Year:", df_explicit$year, "<br>", "Total songs:", df_explicit$n)

plot <- plotly_build(plot)

plot
```

## 2.3 Popularity versus Explicit Songs

The box plots below visualises the popularity of songs based on whether they are explicit or not.

Hover over each plot to see its individual values.

```{r, echo=FALSE}


# Load the necessary libraries
library(ggplot2)
library(plotly)

# Create the box plot using ggplot
plot <- ggplot(df, aes(x = explicit, y = popularity, fill = explicit)) +
  geom_boxplot() +
  labs(title = "Popularity versus explicit songs",
       x = "Explicit Songs",
       y = "Popularity") +
  scale_fill_manual(values = c("steelblue", "darkred")) +
  theme_minimal() +
  theme(legend.position = "none")

# Convert the ggplot object to a plotly object
plot <- ggplotly(plot, tooltip = c("text"))

# Customize the tooltip text
plot$data[[1]]$text <- paste(
  "<b>Explicit:</b> ", df$explicit,
  "<br><b>Popularity:</b> ", df$popularity
)

# Animate the plot using gganimate
plot <- plotly_build(plot)


# Print the animation
plot


```
